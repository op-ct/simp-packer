require 'simp/packer/config/prepper'
require 'fileutils'
require 'rake'
require 'rake/file_utils'

module Simp
  module Packer
    module Build
      # Run the simp-packer build
      #
      #   The test directory should contain 3 files:
      #
      #     vars.json:  json file created when the iso is made.  This points
      #                 to the iso file the output directory and the checksum
      #                 for the iso.  Make sure these are all set correctly.
      #     packer.yaml  YAML containing the settings for the rest of the script
      #                  and will be used to configure the simp.json
      #                  file.  Examples are given in the sample directory.
      #     simp_conf.yaml:  YAML generated by simp_cli.  My script will over
      #                  write things in simp_conf.yaml from settings
      #                  in the packer.yaml file.  See the samples/README for
      #                  more information.
      #
      #   TMPDIR:   When running this script make sure you set the linux
      #             environment variable TMPDIR to point to a directory
      #             that is writeable and has enough space for packer to
      #             create the disk for the machine.
      #
      #   Example usage   TMPDIR=/var/tmp ./simp_packer_test.sh /var/jmg/packer/nofips
      #
      #   Where I have copied the sample directory nofips to /var/jmg/packer and
      #   have edited the packer and vars files to point to my iso.  I also
      #   have already set up in VirtualBox the HOST ONLY network refered to in
      #   the packer.yaml file, or changed the network and IP addresses in the
      #   packer.yaml file to reference a VirtualBox network I have already setup.
      #
      #
      class Runner
        include FileUtils

        attr_accessor :verbose

        # @param [String] test_dir    Directory where the test files exist
        # @param [String] base_dir    The simp-packer directory
        def initialize(
          test_dir = nil,
          base_dir = File.expand_path("#{__dir__}/../../../..")
        )
          @base_dir    = base_dir
          @test_dir    = test_dir || File.expand_path(Dir.pwd, 'simp-packer')
          @verbose = true
        end

        # Create test dir and copy in files
        def prep(vars_json, simp_conf_yaml, packer_yaml)
          mkdir_p @test_dir, verbose: @verbose
          cp vars_json, File.join(@test_dir, 'vars.json'), verbose: @verbose
          cp simp_conf_yaml, File.join(@test_dir, 'simp_conf.yaml'), verbose: @verbose
          cp packer_yaml, File.join(@test_dir, 'packer.yaml'), verbose: @verbose
        end

        # @param opts [Hash] optional
        # @option opts [String] :working_dir
        # @option opts [String] :vars_json
        # @option opts [String] :packer_yaml
        # @option opts [String] :simp_conf_yaml
        # @option opts [String] :dry_run
        def run(opts = {})
          date              = opts[:date_time]      || Time.now.strftime('%Y%m%d-%H%M%S')
          working_dir       = opts[:working_dir]    || File.join(@test_dir, "working.#{date}")
          log_file          = opts[:log_file]       || File.join(@test_dir, "#{date}.simp-packer.log")
          plog_file         = opts[:plog_file]      || ENV['PACKER_LOGPATH'] || File.join(@test_dir, "#{date}.packer.log")
          extra_packer_args = opts[:extra_packer_args] || ENV['SIMP_PACKER_extra_args'] || ''
          tmp_dir           = opts[:tmp_dir]        || nil
          dry_run           = opts[:dry_run]        || false
          # The files are currently needed by Simp::Packer::Config::Prepper (the
          # old simp_config.rb).  They have to exist before this method is called.
          packer_yaml       = opts[:packer_yaml]    || File.join(@test_dir,
                                                                 'packer.yaml')
          simp_conf_yaml    = opts[:simp_conf_yaml] || File.join(@test_dir, 'simp.conf.yaml')
          vars_json         = opts[:vars_json]      || File.join(@test_dir, 'vars.json')

          raise "ERROR: Test dir not found at '#{@test_dir}'" unless File.directory?(@test_dir)
          if @verbose
            STDERR.puts(
              '', "Contents of test_dir (#{@test_dir}):",
              Dir["#{@test_dir}/*"].map { |x| "  #{File.basename(x)}\n" }.join, ''
            )
          end
          # TODO: we shouldn't handle these files, we should accept data
          raise "ERROR: packer.yaml not found at '#{packer_yaml}'" unless File.file?(packer_yaml)
          raise "ERROR: simp.conf.yaml not found at '#{simp_conf_yaml}'" unless File.file?(packer_yaml)
          raise "ERROR: vars.json not found at '#{vars_json}'" unless File.file?(vars_json)

          # scaffold working directory
          rm_rf(working_dir, verbose: @verbose) if File.exist?(working_dir)
          mkdir_p working_dir, verbose: @verbose
          %w[files puppet scripts].each do |f|
            copy_entry(File.join(@base_dir, f), File.join(working_dir, f), verbose: @verbose)
          end

          # set up specific simp-packer configurations (formerly simp_config.rb)
          simp_packer_config = Simp::Packer::Config::Prepper.new(working_dir, @test_dir, @base_dir)
          simp_packer_config.verbose = @verbose
          simp_packer_config.run

          puts "Logs will be written to #{log_file}"

          cmd = <<-CMD.gsub(%r{ {10}}, '')
            set -e; set -o pipefail;
            #{tmp_dir ? "TMP_DIR=#{tmp_dir} " : ''}PACKER_LOG="#{ENV['PACKER_LOG'] || 1}" \
              PACKER_LOGPATH="#{plog_file}" \
              packer build -var-file="#{working_dir}/vars.json" #{extra_packer_args} "#{working_dir}/simp.json" \
              |& tee "#{log_file}"
          CMD

          if dry_run
            puts cmd
          else
            sh cmd
          end
        end
      end
    end
  end
end
